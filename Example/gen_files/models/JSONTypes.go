// WARNING: Do not modify. This file is machine-generated by swagger-gen.

package models

import (
	"fmt"
	"net/url"
	"strconv"
	"strings"
	"time"
)

type JSONDate time.Time

func (o JSONDate) MarshalJSON() ([]byte, error) {
	t := time.Time(o).Format("2006-01-02")
	return []byte(fmt.Sprintf("%+q", t)), nil
}

func (o *JSONDate) UnmarshalJSON(bytes []byte) error {
	t, err := time.Parse(`"2006-01-02"`, string(bytes))
	if err != nil {
		return err
	}
	*o = JSONDate(t)
	return nil
}

type JSONDateTime time.Time

func (o JSONDateTime) MarshalJSON() ([]byte, error) {
	t := time.Time(o).Format(time.RFC3339Nano)
	return []byte(fmt.Sprintf("%+q", t)), nil
}

func (o *JSONDateTime) UnmarshalJSON(bytes []byte) error {
	t, err := time.Parse(fmt.Sprintf("%+q", time.RFC3339Nano), string(bytes))
	if err != nil {
		return err
	}
	*o = JSONDateTime(t)
	return nil
}

type JSONWeek time.Time

func FormatISO8601Week(t time.Time) string {
	year, week := time.Time(t).ISOWeek()
	return fmt.Sprintf("%04dW%02d", year, week)
}

func ParseISO8601Week(str string) (*time.Time, error) {
	// Must be 7 characters long to match "0001W01" format
	if len(str) != 7 {
		return nil, fmt.Errorf("expected week string %+q to be 7 bytes, but got %d", str, len(str))
	}
	components := strings.Split(str, "W")
	if len(components) != 2 {
		return nil, fmt.Errorf("week string %+q could not be parsed", str)
	}
	year, err := strconv.Atoi(components[0])
	if err != nil {
		return nil, fmt.Errorf("year could not be parsed from week string %+q", str)
	}
	week, err := strconv.Atoi(components[1])
	if err != nil {
		return nil, fmt.Errorf("week could not be parsed from week string %+q", str)
	}
	day := 1
	date := time.Date(year, 1, day, 0, 0, 0, 0, time.UTC)
	dYear, dWeek := date.ISOWeek()
	// Since this could be a week in the year previous, increment the day until we get to the desired week year
	for dYear != year && dWeek > 1 {
		day++
		date = time.Date(year, 1, day, 0, 0, 0, 0, time.UTC)
		dYear, dWeek = date.ISOWeek()
	}
	// Find monday of that week
	for date.Weekday() > 1 {
		day--
		date = time.Date(year, 1, day, 0, 0, 0, 0, time.UTC)
	}
	// Get the first day of the provided week
	date = date.AddDate(0, 0, (week-1)*7)
	for date.Year() > year {
		date = date.AddDate(0, 0, -7)
	}
	return &date, nil
}

func (o JSONWeek) MarshalJSON() ([]byte, error) {
	str := FormatISO8601Week(time.Time(o))
	return []byte(fmt.Sprintf("%+q", str)), nil
}

func (o *JSONWeek) UnmarshalJSON(bytes []byte) error {
	str, err := strconv.Unquote(string(bytes))
	if err != nil {
		return err
	}
	date, err := ParseISO8601Week(str)
	if err != nil {
		return err
	}
	*o = JSONWeek(*date)
	return nil
}

type JSONURL url.URL

func (o JSONURL) MarshalJSON() ([]byte, error) {
	u := url.URL(o)
	str := fmt.Sprintf("%+q", u.String())
	return []byte(str), nil
}

func (o *JSONURL) UnmarshalJSON(bytes []byte) error {
	s, err := strconv.Unquote(string(bytes))
	if err != nil {
		return err
	}
	u, err := url.Parse(s)
	if err != nil {
		return err
	}
	*o = JSONURL(*u)
	return nil
}
