import Foundation
import ManualKit

public struct File: ManualKit.File {
    public let filename: String
    let package: String
    let schemas: [Schema]
}

extension File: SourceContentConvertible {
    public var sourceContent: String {
        var lines = [
            "// WARNING: Do not modify. This file is machine-generated by manual.",
            "package \(self.package)",
        ]
        
        let importedModules = self.importedModules
        if importedModules.count > 0 {
            lines.append(importedModules.asImportedModulesSourceContent)
        }
        
        lines += self.schemas.map {$0.sourceContent}
        
        let sourceContent = lines.joined(separator: "\n\n")
        
        return sourceContent + "\n"
    }
}

extension File: ModuleImportable {
    var importedModules: [String] {
        let importedModules = self.schemas.flatMap {$0.importedModules}
        return Array(Set(importedModules))
            .sorted(by: <)
    }
}

// MARK: File: Writable

public extension File {
    func write(in containingURL: URL) throws {
        let fileURL = containingURL.appendingPathComponent(self.filename)
        
        try self.sourceContent.write(toFile: fileURL.path, atomically: false, encoding: .utf8)
    }
}

// MARK: Array: String - asImportedModulesSourceContent

private extension Array where Element == String {
    var asImportedModulesSourceContent: String {
        let lines = self.map { module in
            return "\"\(module)\""
        }
        return "import ".appendingScopedGoContent(lines, withScopeType: .parenthesis)
    }
}
